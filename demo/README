The demo experiments use lxc containers for each UE, eNB, EPC and MBMS application instance.

The UE and eNB communicate via a shared memory address space using the shmem rf device or zmq rf.

The eNB commiuncates with the EPC and MBMS via ethnet bridge interface.

These demos use a package called letce2 which is a lightweight experiment template configuration environment 
that provides hierarchical mechanisms for generating configuration from templates.

See : https://github.com/adjacentlink/letce2
For more on building and installing this package.

The majority of the configuration is handled in the boostrap.cfg config file in each the shmem or zmq directories,
other configuration can be found in the templates directory.

The supplied demo.env will allow each demo experiment to run without installing and of the applications in this project,
it basically sets you PATH and LD_LIBRARY_PATH env variables.

The default cmake build target directory is "build_fauxrf" change this in the demo.env if needed or create a symlink etc.
To build the experiment configuration just run 'make'.

Directory zmq and shmem each have 2 demos, 
1) 1 enb with carrier aggregation and 2 ues that connect to 1 of the enb carriers.
2) 2 enb w/o carrier aggregation and 2 ues each connecting to an enb.


Run 'tree' to view the generated config files.
#tree
.
├── bootstrap.cfg
├── enb-01
│   ├── drb.conf
│   ├── enb.conf
│   ├── init
│   ├── init.local
│   ├── lxc.conf
│   ├── lxc.hook.autodev.sh
│   ├── rr.conf
│   ├── sib.conf
│   └── sib.mbsfn.conf
├── epc-01
│   ├── epc.conf
│   ├── init
│   ├── init.local
│   ├── lxc.conf
│   ├── lxc.hook.autodev.sh
│   ├── mbms.conf
│   └── user_db.csv
├── host
│   ├── bridge
│   └── control
├── letce2.cfg
├── Makefile
├── manifest
├── ue-01
│   ├── init
│   ├── init.local
│   ├── lxc.conf
│   ├── lxc.hook.autodev.sh
│   └── ue.conf
├── ue-02
│   ├── init
│   ├── init.local
│   ├── lxc.conf
│   ├── lxc.hook.autodev.sh
│   └── ue.conf
.
.
.


To start and experiment run 'letce2 lxc start -e ../../demo.env'

To check the containers status run 'sudo lxc-ls -f'

NAME   STATE   AUTOSTART GROUPS IPV4                                    IPV6 UNPRIVILEGED 
enb-01 RUNNING 0         -      10.99.1.20                              -    false        
epc-01 RUNNING 0         -      10.99.1.101, 172.16.0.101, 172.16.0.254 -    false        
ue-01  RUNNING 0         -      10.99.1.1, 172.16.0.1                   -    false        
ue-02  RUNNING 0         -      10.99.1.2, 172.16.0.2                   -    false        
ue-03  RUNNING 0         -      10.99.1.3, 172.16.0.3                   -    false

Here we can see the control bridged interface 10.99.1.id and the epc created interfaces.
Also the ue's are showing that they have indeed made an atachment on the 172.16.0.id address.


A quick view of 'top' shows the enb and ue's running with reasonable cpu usage.

 692062 root      20   0 1157304 624112  60312 S  15.9   7.7   0:04.18 srsenb                                                                                                                                                                 
 692076 root      20   0 1604464   1.1g  58940 S  15.0  13.7   0:03.21 srsue                                                                                                                                                                  
 692078 root      20   0 1604464   1.1g  58904 S  15.0  13.7   0:03.20 srsue                                                                                                                                                                  
 692084 root      20   0 1604464   1.1g  58940 S  15.0  13.7   0:03.22 srsue                                                                                                                                                                  


Now log into UE-1 container via ssh ...
#ssh 10.99.1.1

# Check active interfaces
#ifconfig 
exp0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.99.1.1  netmask 255.255.255.0  broadcast 10.99.1.255
        inet6 fe80::4c95:3cff:fe08:d823  prefixlen 64  scopeid 0x20<link>
        ether 4e:95:3c:08:d8:23  txqueuelen 1000  (Ethernet)
        RX packets 111  bytes 16359 (15.9 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 38  bytes 6177 (6.0 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

srsue: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1500
        inet 172.16.0.1  netmask 255.255.255.0  destination 172.16.0.1
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

#ping 172.16.0.2
PING 172.16.0.2 (172.16.0.2) 56(84) bytes of data.
64 bytes from 172.16.0.2: icmp_seq=1 ttl=63 time=703 ms
64 bytes from 172.16.0.2: icmp_seq=2 ttl=63 time=43.9 ms

#ping 172.16.0.3
PING 172.16.0.3 (172.16.0.3) 56(84) bytes of data.
64 bytes from 172.16.0.3: icmp_seq=1 ttl=63 time=461 ms
64 bytes from 172.16.0.3: icmp_seq=2 ttl=63 time=61.8 ms

#ping 172.16.0.101
PING 172.16.0.101 (172.16.0.101) 56(84) bytes of data.
64 bytes from 172.16.0.101: icmp_seq=1 ttl=64 time=32.9 ms
64 bytes from 172.16.0.101: icmp_seq=2 ttl=64 time=31.2 ms

#logout

To stop and experiment run 'letce2 lxc stop'

To clean the experiment configuration and runtime log files just run 'make clean'.

Note all generated log files are stored in the 'persist' directory.
